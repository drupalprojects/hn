<?php

use Drupal\Core\Render\Element;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformOptions;
use Drupal\webform\WebformElementManagerInterface;

/**
 * Implements hook_help().
 */
function hn_webform_help($route_name) {
  switch ($route_name) {
    // Main module help for the hn_webform module.
    case 'help.page.hn_webform':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Endpoint to post all forms to') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function custom_element_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Only alter webform submissions forms.
  if (strpos($form_id, 'webform_submission') !== FALSE) {
    $form['#validate'][] = 'custom_element_form_validate';
  }

  // Only alter webform UI element forms.
  if ($form_id === 'webform_ui_element_form') {
    unset($form['properties']['form']['input_mask']);

  }

}

/**
 * @param $element
 * @param $element_manager
 */
function hn_webform_recursively_parse_elements(array &$element, WebformElementManagerInterface $element_manager) {
  // Get all children of this element
  $children_keys = Element::children($element);

  $wizard_pages = [];

  // If it has children, parse them first.
  foreach ($children_keys as $child_key) {
    $child_element = $element[$child_key];

    hn_webform_recursively_parse_elements($child_element, $element_manager);

    // To make the children more accessible, remove them from the parent array
    unset($element[$child_key]);

    // If it is a wizard_page, add it to it's own array
    if(isset($child_element['#type']) && $child_element['#type'] == 'webform_wizard_page') {
      $wizard_pages[] = $child_element;
    }
    // If it is a normal element, move it to the composite_elements array
    else {
      $element['composite_elements'][] = $child_element;
    }
  }

  // If there are wizard pages, group them in a webform_wizard_pages element
  if(!empty($wizard_pages)){

    $element['composite_elements'][] = [
      '#type' => 'webform_wizard_pages',
      '#webform_key' => 'wizard_pages',
      'composite_elements' => $wizard_pages
    ];

  }


  /**
   * If there is a #options available, make sure to make it
   * JSON friendly. So an array (sortable) instead of an object.
   */
  if(isset($element['#options']) && is_array($element['#options'])) {

    $json_friendly_array = [];

    foreach($element['#options'] as $value => $text) {
      $json_friendly_array[] = [
        'value' => $value,
        'text' => $text
      ];
    }

    $element['#options'] = $json_friendly_array;

  }

  /**
   * Some elements consist of multiple fields. For example, the address field
   * contains the street, postal code and country fields.
   * To resolve these, use webform_composite.
   */
  if (isset($element['#webform_composite']) && $element['#webform_composite']) {
    // Get custom Composite Element class from custom_elements:
    $element_handler = $element_manager->getElementInstance($element);
    // Initialize the element:
    $element_handler->initialize($element);
    // If method getCompositeElements is callable:
    if (is_callable([$element_handler, 'getCompositeElements'])) {
      $element['composite_elements'] = array_values($element_handler->getCompositeElements());
    }
    if (empty($element['composite_elements'])) {
      return;
    }
    foreach ($element['composite_elements'] as &$composite_element) {
      $composite_element['#webform_key'] .= '-' . $element['#webform_key'];
      hn_webform_recursively_parse_elements($composite_element, $element_manager);
      // Get the actual options list instead of references:
      if ($composite_element['#type'] === 'select' && isset($composite_element['#options'])) {
        $composite_element['#options'] = WebformOptions::getElementOptions($composite_element);
      }
    }
  }

}

function hn_webform_api_alter_field_entity_reference($entity, $value, &$returnArray) {

  /**
   * This module only resolves references to the Webform element.
   */
  if($entity instanceof Webform) {

    $form_id = $entity->id();
    $settings = $entity->getSettings();

    $moduleHandler = \Drupal::moduleHandler();
    $moduleHandler->alter('hn_webform_settings', $settings);

    $token = Drupal::csrfToken()->get('token');
    $element_manager = Drupal::service('plugin.manager.webform.element');

    $elements = array_values($entity->getElementsInitialized());

    hn_webform_recursively_parse_elements($elements, $element_manager);

    $returnArray = [
      'form_id' => $form_id,
      'settings' => $settings,
      'elements' => $elements['composite_elements'],
      'token' => $token,
    ];
  }
}

<?php

use Drupal\Core\Render\Element;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformOptions;
use Drupal\webform\WebformElementManagerInterface;

/**
 * Implements hook_help().
 */
function api_form_help($route_name) {
  switch ($route_name) {
    // Main module help for the api_form module.
    case 'help.page.api_form':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Endpoint to post all forms to') . '</p>';
      return $output;
  }
}

function get_custom_elements() {
  $elements = [
    'requiredError' => [
      '#key' => 'requiredError',
      '#type' => 'textfield',
      '#title' => t('Custom required error message'),
      '#description' => t('If set, this message will be used when a required webform element is empty.'),
      '#default_value' => t('Vul alsjeblieft iets in bij :name.'),
    ],
    'patternError' => [
      '#key' => 'patternError',
      '#type' => 'webform_select_other',
      '#title' => t('Custom pattern error message'),
      '#description' => t('If set, this message will be used when an element with a pattern doesn\'t match it'),
      '#default_value' => 'alpha',
      '#options' => [
        'alpha' => t('Alleen letters zijn toegestaan.'),
        'numeric' => t('Alleen cijfers zijn toegestaan.'),
      ],
    ],
    'emailError' => [
      '#key' => 'emailError',
      '#type' => 'textfield',
      '#title' => t('Custom email error message'),
      '#description' => t('If set, this message will be used when an email element is invalid.'),
      '#default_value' => t('Controleer het e-mailadres.'),
    ],
    'dateError' => [
      '#key' => 'dateError',
      '#type' => 'textfield',
      '#title' => t('Custom date error message'),
      '#description' => t('If set, this message will be used when a date value is invalid.'),
      '#default_value' => t('Vul alsjeblieft een geldige datum in. (dd/mm/yyyy)'),
    ],
    'dateBeforeError' => [
      '#key' => 'dateBeforeError',
      '#type' => 'textfield',
      '#title' => t('Custom date range error message'),
      '#description' => t('If set, this message will be used when a date is not before min value.'),
      '#default_value' => t('Vul alsjeblieft een datum voor :min in.'),
    ],
    'dateAfterError' => [
      '#key' => 'dateAfterError',
      '#type' => 'textfield',
      '#title' => t('Custom date range error message'),
      '#description' => t('If set, this message will be used when a date is not after max value.'),
      '#default_value' => t('Vul alsjeblieft een datum na :max in.'),
    ],
    'dateRangeError' => [
      '#key' => 'dateRangeError',
      '#type' => 'textfield',
      '#title' => t('Custom date range error message'),
      '#description' => t('If set, this message will be used when a date is not between min and max value.'),
      '#default_value' => t('Vul alsjeblieft een datum tussen :min en :max in.'),
    ],
  ];

  return $elements;
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function custom_element_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Only alter webform submissions forms.
  if (strpos($form_id, 'webform_submission') !== FALSE) {
    $form['#validate'][] = 'custom_element_form_validate';
  }

  // Only alter webform UI element forms.
  if ($form_id === 'webform_ui_element_form') {

    $elements = get_custom_elements();

    $overrides = getOverrides($elements);

    $element_properties = $form_state->get('element_properties');

    _custom_element_process_altered_element($elements, $element_properties);
    _custom_element_process_altered_element($overrides, $element_properties);

    $form_state->set('element_properties', $element_properties);

    unset($form['properties']['form']['input_mask']);

    if(!isset($form['properties']['overrides'])) {
      $form['properties']['overrides'] = [
        '#type' => 'details',
        '#title' => t('Default value Overrides'),
        '#description' => t('Please check all fields of which you want the value to be decoupled from the master template.'),
        '#open' => FALSE,
      ];
    }

    $form['properties']['overrides'] += $overrides;

    $form['properties']['messages'] = [
      '#type' => 'details',
      '#title' => t('Messages'),
      '#description' => t('Define all (error/validation) messages for this form.'),
    ];
    $form['properties']['messages']['requiredError'] = $elements['requiredError'];
    $form['properties']['messages']['patternError'] = $elements['patternError'];
    $form['properties']['messages']['emailError'] = $elements['emailError'];
    $form['properties']['messages']['dateError'] = $elements['dateError'];
    $form['properties']['messages']['dateBeforeError'] = $elements['dateBeforeError'];
    $form['properties']['messages']['dateAfterError'] = $elements['dateAfterError'];
    $form['properties']['messages']['dateRangeError'] = $elements['dateRangeError'];
  }
}

function _custom_element_process_altered_element(&$array, &$element_properties) {
  foreach($array as $element) {
    if(!isset($element_properties[$element['#key']])) {
      $element_properties[$element['#key']] = $element['#default_value'];
    } else {
      $element['#default_value'] = $element_properties[$element['#key']];
    }
    $element['#parents'] = ['properties', $element['#key']];
    $array[$element['#key']] = $element;
  }
}

function getOverrides($formElements) {
  $elements = [];

  foreach ($formElements as $element) {
    $key = 'override_' . $element['#key'];
    $elements[$key] = [
      '#key' => $key,
      '#type' => 'checkbox',
      '#title' => $element['#title'],
      '#default_value' => FALSE,
    ];
  }

  return $elements;
}

/**
 * @param $element
 * @param $element_manager
 */
function api_form_recursively_parse_elements(array &$element, WebformElementManagerInterface $element_manager) {
  // Get all children of this element
  $children_keys = Element::children($element);

  // If it has children, parse them first.
  foreach ($children_keys as $child_key) {
    $child_element = $element[$child_key];

    api_form_recursively_parse_elements($child_element, $element_manager);

    // To make the children more accessible, move them to the 'composite_elements' property
    $element['composite_elements'][] = $child_element;
    unset($element[$child_key]);
  }

  /**
   * If there is a #options available, make sure to make it
   * JSON friendly. So an array (sortable) instead of an object.
   */
  if(isset($element['#options']) && is_array($element['#options'])) {

    $json_friendly_array = [];

    foreach($element['#options'] as $value => $text) {
      $json_friendly_array[] = [
        'value' => $value,
        'text' => $text
      ];
    }

    $element['#options'] = $json_friendly_array;

  }

  /**
   * Some elements consist of multiple fields. For example, the address field
   * contains the street, postal code and country fields.
   * To resolve these, use webform_composite.
   */
  if (isset($element['#webform_composite']) && $element['#webform_composite']) {
    // Get custom Composite Element class from custom_elements:
    $element_handler = $element_manager->getElementInstance($element);
    // Initialize the element:
    $element_handler->initialize($element);
    // If method getCompositeElements is callable:
    if (is_callable([$element_handler, 'getCompositeElements'])) {
      $element['composite_elements'] = array_values($element_handler->getCompositeElements());
    }
    if (empty($element['composite_elements'])) {
      return;
    }
    foreach ($element['composite_elements'] as &$composite_element) {
      $composite_element['#webform_key'] .= '-' . $element['#webform_key'];
      // Get the actual options list instead of references:
      if ($composite_element['#type'] == 'select' && isset($composite_element['#options'])) {
        $composite_element['#options'] = WebformOptions::getElementOptions($composite_element);
      }
    }
  }

}

function api_form_api_alter_entity_reference_data($entity, $value, &$returnArray) {

  /**
   * This module only resolves references to the Webform element.
   */
  if($entity instanceof Webform) {

    $form_id = $entity->id();
    $settings = $entity->getSettings();
    $token = Drupal::csrfToken()->get('token');
    $element_manager = Drupal::service('plugin.manager.webform.element');

    $elements = array_values($entity->getElementsInitialized());

    api_form_recursively_parse_elements($elements, $element_manager);

    $returnArray = [
      'form_id' => $form_id,
      'settings' => $settings,
      'elements' => $elements['composite_elements'],
      'token' => $token,
    ];
  }
}

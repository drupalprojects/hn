<?php


use Drupal\api_url\FileUrlsTrait;
use Drupal\webform\Entity\WebformOptions;
use Drupal\link\Plugin\Field\FieldType\LinkItem;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;
use Drupal\views\Entity\View;
use Drupal\webform\Entity\Webform;

/**
 * Implements hook_help().
 */
function api_url_help($route_name) {
  switch ($route_name) {
    // Main module help for the api_url module.
    case 'help.page.api_url':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Url endpoint') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements api_alter_entity_reference_data().
 *
 * Why do we add [count($returnArray) - 1] at the end of every returnArray:
 * In the Trait FieldTrait we first fill it with incomplete data
 * if the entity is instanceof the below entities then replace this data
 * with new data.
 *
 * @param $entity
 *   Entity
 * @param $value
 *   Value which the entity comes from
 * @param $returnArray
 *   Referenced entity
 */
function api_url_api_alter_entity_reference_data($entity, $value, &$returnArray) {
  switch (TRUE) {
    case $entity instanceof File:
      $fid = $value->target_id;
      $file = Drupal::entityTypeManager()->getStorage('file')->load($fid);
      $fullFile = FileUrlsTrait::getFileUri($file);
      $returnArray[count($returnArray) - 1] = $fullFile;
      break;

    case $entity instanceof User:
      $returnArray = $entity->id();
      break;

    case $entity instanceof View:
      $view = $value->getValue();
      $renderer = Drupal::service('renderer');
      $embedded_view = views_embed_view($view['target_id'], 'rest_export_1');
      $rendered_view = $renderer->render($embedded_view);
      $returnArray = json_decode($rendered_view);
      break;

    case $entity instanceof Webform:
      $form_id = $entity->id();
      $settings = $entity->getSettings();
      $elements = array_values($entity->getElementsInitialized());
      $element_manager = Drupal::service('plugin.manager.webform.element');
      foreach ($elements as &$element) {
        // Check for fieldset property
        // Recursively searches for 'loose' fieldset child elements
        // with same parent key:
        getRecursiveFieldsetElements($element, $element_manager);
        // Get composite elements:
        getCompositeElements($element, $element_manager);
      }
      $token = Drupal::csrfToken()->get('token');
      $returnArray = [
        'form_id' => $form_id,
        'settings' => $settings,
        'elements' => $elements,
        'token' => $token,
      ];
      break;
  }
}

/**
 * Recursively finds fieldset elements for an element.
 * @param $element
 * @param $element_manager
 * @return bool
 */
function getRecursiveFieldsetElements(&$element, $element_manager) {
  if (!$element) {
    return FALSE;
  }
  if (isset($element['#type']) && $element['#type'] === 'fieldset') {
    // Searches for 'loose' fieldset child elements with same parent key.
    $element['#webform_composite'] = TRUE;
    foreach ($element as $key => $fieldset_key) {
      if ($fieldset_key['#webform_parent_key'] === $element['#webform_key']) {
        // Get recursive fieldset elements:
        getRecursiveFieldsetElements($fieldset_key, $element_manager);
        // Get composite elements:
        getCompositeElements($fieldset_key, $element_manager);
        // Appends child to parent's array for easy rendering.
        $element['composite_elements'][] = $fieldset_key;
        // Remove unnecessary element:
        unset($element[$key]);
      }
    }
  }
  return TRUE;
}

/**
 * Finds the composite elements for an element.
 * @param $element
 * @param $element_manager
 * @return bool
 */
function getCompositeElements(&$element, $element_manager) {
  if (!$element) {
    return FALSE;
  }
  if (isset($element['#webform_composite']) && $element['#webform_composite']) {
    // Get custom Composite Element class from custom_elements:
    $element_handler = $element_manager->getElementInstance($element);
    // Initialize the element:
    $element_handler->initialize($element);
    // If method getCompositeElements is callable:
    if (is_callable([$element_handler, 'getCompositeElements'])) {
      $element['composite_elements'] = $element_handler->getCompositeElements();
    }
    foreach ($element['composite_elements'] as &$composite_element) {
      // Get the actual options list instead of references:
      if ($composite_element['#type'] == 'select' && isset($composite_element['#options'])) {
        $composite_element['#options'] = WebformOptions::getElementOptions($composite_element);
      }
    }
    return $element;
  }
  return TRUE;
}

/**
 * Implements api_alter_entity_reference_data().
 */
function api_url_api_alter_field_data($value, &$returnArray) {
  switch (TRUE) {
    case $value instanceof LinkItem:
      $url = $value->getUrl();

      $uri = NULL;
      if ($url->isRouted()) {
        $uri = $url->toString();
      }
      elseif ($url->isExternal()) {
        $uri = $url->getUri();
      }

      $link = $value->getValue();
      $link['uri'] = $uri;

      $returnArray = $link;
      break;
  }
}

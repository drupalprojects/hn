<?php


use Drupal\api_url\FileUrlsTrait;
use Drupal\path\Plugin\Field\FieldType\PathFieldItemList;
use Drupal\link\Plugin\Field\FieldType\LinkItem;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\views\Entity\View;

/**
 * Implements hook_help().
 */
function api_url_help($route_name) {
  switch ($route_name) {
    // Main module help for the api_url module.
    case 'help.page.api_url':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Url endpoint') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements api_alter_entity_reference_data().
 *
 * Why do we add [count($returnArray) - 1] at the end of every returnArray:
 * In the Trait FieldTrait we first fill it with incomplete data
 * if the entity is instanceof the below entities then replace this data
 * with new data.
 *
 * @param $entity
 *   Entity
 * @param $value
 *   Value which the entity comes from
 * @param $returnArray
 *   Referenced entity
 */
function api_url_api_alter_field_entity_reference($entity, $value, &$returnArray) {
  switch (TRUE) {
    case $entity instanceof File:
      $fid = $value->target_id;
      $file = Drupal::entityTypeManager()->getStorage('file')->load($fid);
      $fullFile = FileUrlsTrait::getFileUri($file);
      $returnArray[count($returnArray) - 1] = $fullFile;
      break;

    case $entity instanceof User:
      $returnArray = $entity->id();
      break;

    case $entity instanceof View:
      $view = $value->getValue();
      $renderer = Drupal::service('renderer');
      $embedded_view = views_embed_view($view['target_id'], 'rest_export_1');
      $rendered_view = $renderer->render($embedded_view);
      $returnArray = json_decode($rendered_view);
      break;
  }
}

/**
 * Implements api_alter_entity_reference_data().
 */
function api_url_api_alter_field_value($value, &$returnArray) {
  switch (TRUE) {
    case $value instanceof LinkItem:
      $url = $value->getUrl();

      $uri = NULL;
      if ($url->isRouted()) {
        $uri = $url->toString();
      }
      elseif ($url->isExternal()) {
        $uri = $url->getUri();
      }

      $link = $value->getValue();
      $link['uri'] = $uri;

      $returnArray = $link;
      break;
  }
}

/**
 * Implements api_alter_field().
 */
function api_url_api_alter_field($field, &$returnArray) {
  switch (TRUE) {
    case $field instanceof PathFieldItemList:
      $returnArray = $field->getEntity()->toUrl()->toString();
      break;
  }
}
